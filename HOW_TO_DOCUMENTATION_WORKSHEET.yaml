# OUTDATED

As with so many things this page is outdated/deprecated and should be ignored or even deleted until it up to date

HOW TO DOCUMENT Rocket THEMES:
  - Rocket, vs Rocket-science:
    - this stuff is simple
    - that's seems to be the spirit of SSGs, 11ty, and now Rocket
    - Rocket helps keep simple things simple
    - Rocket themes try to keep Rocket simple
  - basics:
    - how files and urls work together:
      - yada
      - nevermind 11ty:
        - yada
        - adding 11ty to the mix:
          - yada
          - adding Rocket to the mix:
            - anchors
      - adding themes to the mix
----
This doc really needs to tie in to see-dick-run level of history of Rocket/ssgs/etc
STAKEHOLDER VIEW:
  examples:
    - Provide separate grid areas to isolate functionality w/o having to learn whole system before you even start
    - allow for any power of 11ty within any grid area(s)
    - make the grid areas super easy to understand and not worry about
    - Rocket nav coupling as a problem and a solution, both
    - 11ty data coupling as a problem and a solution, both
    - nunchucks (or other) coupling as a problem and a solution, both
    - [any other stacks] coupling as a problem and a solution, both
  takeaway:
    - every stakeholder except Thomas/Benny/etc suffers from elephant issue
    - which is sad because that's exactly what Rocket could fix if we let it
    - so the game is how to allow for vectored progress?
  or this way:
    - if you already totally understand these stacks, Rocket will let you fly:
      - html
      - css
      - 11ty
      - markdown
      - etc at least 30 deep
    - Rocket themes attempts to vector your progress without coupling
  this is what Wordpress did:
    - vector your progress without coupling to learning stacks:
      - everybody was already doing LAMP
      - so nothing to learn
      - and even if you didn't do LAMP you could simply follow easy instructions:
        - because the vendors would all do LAMP setups for you with simple command lines
    - it was a sequence problem:
      - they still had to learn the stuff to gain the great powers
      - just that they got the site up and running first
    - the problem with great power, though, is great responsibility
    - now you're lugging around a database and all these other stacks from the 1990s
  but now we have an abstraction:
    - vector with the power of any stack
    - without dragging you through the mud of untangling another stack
    - it's not a slam dunk - we will never truly get there
    - but everything that we can do in this direction is a good thing
  so here's how it might work:
    - vector distance before power
    - make a game out of loose coupling, stacks wise
    - first, assemble loose coupling tricks:
      - then, assemble stacks
      - in that order
    - for every stack, api, command, or power:
      - assume lack of understanding at the entry point
      - lay down a minimum of contracts to:
        - vector as long as possible
        - w/o coupling

  glossary:
    pure exchange:
      - is the only result that is interesting to waw:
        - in a world of too much information:
          - gotta focus on the subset of what matters:
            - provider gets something for his effort
            - consumer gets something from their visit
    [vector/distance/progress/waw]: how close can I get to a pure exchange?
    [stacks/vendor/dependency/resource]: what hoops do I need to jump through?
    [power/perfection/etc]: magnify amplitude of exchange
  if you already have a stack/resource then this doesn't apply to you
  EASIER to understand as tight coupling, especially:
    - daily givens for about 4 million of us:
      - git
      - markdown
      - basic html but mostly without css
      - basic file system
    - negotiated exceptions:
    - CSS grid areas wtf?
      -
    - hide the power stacks - anything that came after 1990s:
      - nunjucks
      - presets
      - 11ty
      - rollup
      - js
      - service worker
      - css
      - json
      - where/how images stored
      - where/how deployed
      -
    - anything already forgotten since 1990s:
      - mysql
      - php
      - third normal form
      - single value of truth
CMS, data abstraction into a sql database wizardry has it's place:
  - for most of us, though, it's a giant distraction
  - file systems are straigtforward and direct, and an SSG can plug into that easily
  -
n SECTION INTRO:
  - biggest concern is being ready for the 4 million+:
    - What we saw last couple years was a notable pent up demand for a sensible Wordpress replacement. 11ty pave the way, but Rocket put the nail in the coffin. And now there are 4 million people that are skill-ready for this, and I want to make sure that Rocket is, in turn, ready for them.
  - Docs and decoupling as a value add - help at the high level, first:
    - Simplicity can be power, too
    - Wordpress/Drupal/etc vs SSG - a historical [re-frame]
    - `#useThePlatform` as an underlying theme
    - Some similar market, different approach, 4 million target devs
    - make the customization process more real
  - The 11ty->Rocket navigation stack value add
  - Rocket as a great sample set for advanced 11ty
  - 20 presized grids to match archetypes we all know
  - When to use straight Rocket w/o these themes? Anytime!
  - JUST ENOUGH nunjucks, not none
FAQ:
  - if nunjucks or equivalent is good, why not use it in Rocket-themes?:
    - we do, just in extremely limited way
    - see "greatest chance of failure is doing too much at once"
    - easy (and necessary) to add back in later
    - you can find them as "extras"
  - how to componentize when data and css is involved?:
    - naming conventions?
    - folders?
    - taking extra care with css
  - why do some themes seem so crude and simplistic?:
    - it's a feature, not a bug :)
    - PRs and new themes welcomed!
  - how to cash in with your own new theme:
    - if that's your business plan, you can offer this easily
    - feel free to use these as a base or a fork
    - we'd be happy to
  - what about more careful segregation of work for components and remote repo?:
    - great idea
    - that might be a good Rocket issue to bring up
  - when to use these themes vs straight Rocket:
    - yada
  - a-b testing your way to daily improvements:
    - start with a fairly straightforward plain theme or two
    - keep morphing, a-b testing as you go
    - that's my business plan, anyway
HOW DOES THIS AFFECT CURRENT WORK?:
  - theme-launch and not-whatever presets all as bare bones html as possible
  - extra content presets but also win accompanying naming conventions
  -
  - Rocket-11ty sample code shunted off and away into separate area
  - grid-area as separate "chunk" of decoupled code
  - decoupling as much nunjucks and data as possible
  - some "content modules" as extras
HOW DOES IT AFFECT THE BUSINESS AND MARKETING PLANS?:
  - need take a takeout or join that makes sense
  - need a schedule that moves sooner than later
  - need to define "at scale" for that market
  - can fall back on FAQ to address some of secondary concerns of market
  - how to right-size your project for Rocket - a guide
  - WTF how to name this without weirdnesses?:
    - WAW-Rocket until a better one comes along??
    - RT for Rocket themes
    - WAW branded themes -> fastest route to exchanges:
      - haha reference implementation for the spec
      - show a Rocket going to a meeting between friends
    - please submit your name or suggestion
  -
Rocket may never replace Wordpress on the 39 million sites that already use it.

But for the 4 million of us that already work in markup, git, npm, and html every day - it's probably a much better fit.

Amd for the 6 billion of us waking up every morning to discover that we may have to provide our own best face to the world rather than relying on another medium to exchange information, something like Rocket begs some interesting questions.

WAW Rocket themes are a dumber Rocket. There, I said it. Ouch, because Rocket is really smart, and smart is almost always better. But sometimes it takes a while to catch up with smart, so Rocket themes make a good stand in, until you can catch up.

After all - these rocket themes are pointed at the larger group of 4 million of us that already use markdown, git, npm and html every day. The smaller subset of that group that can instantly dive into and grok nunjucks, 11ty, or ... is significantly smaller, so this gives the larger group an entry point to keep customizing, a-b testing their deployed sites, and checking google analytics every day, while they catch up with the powerful underlying stacks that Rocket offers them.

Sadly, fins DO come with one technical hurdle beyond the markdown, git, npm, and basic html. Basic html can get disorganized pretty fast, and theming is all about being organized, or providing a convenient structure. CSS Grid areas, to the rescue. This allows us to make little boxes and shove everything into the little boxes. Nothing that decouples things spacially is perfect, but at least it's a good start.

You won't have to learn CSS Grid areas much - that work is done for you. But you will have to learn just enough to at least to paint within the numbers - er uh - work within the boxes. Fins makes every effort to not slow you down, and CSS Grid areas is no exception. Here's to trying to make that painless.
----

for those of us who don't have the luxury of "wondering" whether our site is accomplishing our goal of an exchange of information

PLAIN IS A FEATURE, NOT A BUG:
  - yada

CONTRACT:
- designed specifically for the 4 million who:
  - already work in these stacks on a daily/weekly basis:
    - git or even more specifically github
    - npm or spin-offs yarn etc
    - markdown - basic or advanced
    - html - basic or advanced
  - want the power made available by many other current stacks and standards
  - specifically incentivized through time limits of their jobs not to have to `#learnEverythingNewNow`
  - those things they are forced to eventually learn should at least conform to wc3 or similar standards if at all possible reasonable
  - specifically dis-incentivized to learning legacy stacks such as ...
STARTING FINS NUNJUCKS:
  - just basically "don't touch" at first
  - rocket takes care of you here
  - then when you get comfortable, and have time to understand it
YOU COULD HAVE CODE OPEN FILES EXPECTING TO BE ALTERED:
  - code /Users/petecarapetyan/work/df/rocket-themes/fins/src/docs/_assets/webmanifest.json
SHOULD I ENUMERATE LAUNCH FILES IGNORED?:
  - such as _data or
WEBAPPWRITER redux:
  First, let me demonstrate how easy it is to get lost in one little piece of the puzzle of what we are doing here.

  This web-thing that you and I work on. Is it a web-site? web-app? Even just those two are becoming the same, but there is so much more. For some of us it is the visual or web-design. Or for others it's all about functionality.

  So many ways to focus on the job we need to get done today - and miss the bigger thing that we are doing. What is this bigger thing that we are working on? Is it an experience? Is it an exchange? Is it our identity? Is it ...

  Whatever this bigger whole is, this site attempts to address that as an objective. In industry this kind of thinking has been called a performance spec - a description of what you want a vendor to produce, not the nuts and bolts of how the vendor should produce it.

  Great design shops such as Ideo serve such a function - to help a company identify what they are trying to design, rather than just jumping in and executing it.

  So let's look at that.
